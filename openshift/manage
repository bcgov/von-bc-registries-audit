#!/bin/bash
export MSYS_NO_PATHCONV=1
set -e
SCRIPT_HOME="$( cd "$( dirname "$0" )" && pwd )"

# =================================================================================================================
# Usage:
# -----------------------------------------------------------------------------------------------------------------
usage () {
  cat <<-EOF

  Allows you to manage certain aspects of the application environment.

  Usage: 
    $0 [options] [commands]

    buildandtag <tag/>
      - Build the image(s) for the project in OCP using the local working copy of the code.
      - Tags the built images with the specified tag.
      Example;
        $0 -e tools buildAndTag dev

    build [<image/>]
      - Build the images for the project in OCP using the local working copy of the code.
      Examples;
      - Build everything:
        $0 -e tools build
      - Build the doctest image only:
        $0 -e tools build doctest
      Images:
      - doctest

    tag <sourceTag/> <destinationTag/>
      - Tags all of the application images.
      Example;
        $0 -e tools tag latest dev

    clean
      - Deletes all application resources from a given environment.
EOF
}

# =================================================================================================================
# Process the local command line arguments and pass everything else along.
# - The 'getopts' options string must start with ':' for this to work.
# -----------------------------------------------------------------------------------------------------------------
while [ ${OPTIND} -le $# ]; do
  if getopts : FLAG; then
    case ${FLAG} in
      # Pass unrecognized options ...
      \?) pass+=" -${OPTARG}" ;;
    esac
  else
    # Pass unrecognized arguments ...
    pass+=" ${!OPTIND}"
    let OPTIND++
  fi
done

# Pass the unrecognized arguments along for further processing ...
shift $((OPTIND-1))
set -- "$@" $(echo -e "${pass}" | sed -e 's/^[[:space:]]*//')
# =================================================================================================================

# -----------------------------------------------------------------------------------------------------------------
# Define hook scripts:
# - These must be defined before the main settings script 'settings.sh' is loaded.
# -----------------------------------------------------------------------------------------------------------------
onRequiredOptionsExist() {
  (
    if [ -z "${DEPLOYMENT_ENV_NAME}" ]; then
      _red='\033[0;31m'
      _nc='\033[0m' # No Color
          echo -e "\n${_red}You MUST specify an environment name using the '-e' flag.${_nc}"
          echo -e "${_red}Assuming a default would have unwanted consequences.${_nc}\n"
          return 1
        else
          return 0
    fi
  )
}

onUsesCommandLineArguments() {
  (
    # This script is expecting command line arguments to be passed ...
    return 0
  )
}

# -----------------------------------------------------------------------------------------------------------------
# Initialization:
# -----------------------------------------------------------------------------------------------------------------
# Load the project settings and functions ...
_includeFile="ocFunctions.inc"
_settingsFile="settings.sh"
if [ ! -z $(type -p ${_includeFile}) ]; then
  _includeFilePath=$(type -p ${_includeFile})
  export OCTOOLSBIN=$(dirname ${_includeFilePath})

  if [ -f ${OCTOOLSBIN}/${_settingsFile} ]; then
    . ${OCTOOLSBIN}/${_settingsFile}
  fi

  if [ -f ${OCTOOLSBIN}/${_includeFile} ]; then
    . ${OCTOOLSBIN}/${_includeFile}
  fi
else
  _red='\033[0;31m'
  _yellow='\033[1;33m'
  _nc='\033[0m' # No Color
  echo -e \\n"${_red}${_includeFile} could not be found on the path.${_nc}"
  echo -e "${_yellow}Please ensure the openshift-developer-tools are installed on and registered on your path.${_nc}"
  echo -e "${_yellow}https://github.com/BCDevOps/openshift-developer-tools${_nc}"
fi

# -----------------------------------------------------------------------------------------------------------------
# Functions:
# -----------------------------------------------------------------------------------------------------------------
function cleanEnv() {
  printAndAskToContinue "If you contiune all of the application resources will be perminently deleted from $(getProjectName)."
  oc -n $(getProjectName) delete all,pvc,secret,networkpolicies -l app=DocTest
}

function functionExists() {
  (
    if [ ! -z ${1} ] && type ${1} &>/dev/null; then
      return 0
    else
      return 1
    fi
  )
}

function build-and-tag() {
  (
    _tag=${1}
    
    if [ -z "${_tag}" ]; then
      echoError "\ntag; You MUST supply a tag.\n"
      exit 1
    fi

    build-all
    tag "latest" "${_tag}"
  )
}

function build-all() {
 build-doctest
}

function build-doctest() {
  _namespace=$(getProjectName)
  echo -e "\n\n===================================================================================================="
  echo -e "Building the 'doctest' image via binary build ..."
  echo -e "----------------------------------------------------------------------------------------------------"
  oc -n ${_namespace} start-build doctest --follow=true --from-dir=.. --no-cache
  echo -e "===================================================================================================="
}

function tag()
{
  (
    _sourceTag=${1}
    _destTag=${2}
    
    if [ -z "${_sourceTag}" ] || [ -z "${_destTag}" ]; then
      echoError "\ntag; You MUST supply both 'source' and 'destination' tag.\n"
      exit 1
    fi

    images="doctest"
    for image in ${images}; do
      # Tag images ...
      echo -e "\nTagging ${image}:${_sourceTag} as ${image}:${_destTag} ..."
      oc -n ${TOOLS} tag ${image}:${_sourceTag} ${image}:${_destTag}
    done
  )
}
# =================================================================================================================

pushd ${SCRIPT_HOME} >/dev/null
_cmd=$(toLower ${1})
shift

case "${_cmd}" in
  clean)
    cleanEnv
    ;;
  build)
    buildImage=$(toLower ${1})
    shift || buildImage=all
    buildImage=$(echo ${buildImage} | sed s~^vcr-~~)
    case "$buildImage" in
      *=*)
        buildImage=all
        ;;
    esac

    if functionExists "build-${buildImage}"; then
      eval "build-${buildImage}"
    else
      echo -e "Error:\nThe build function, build-${buildImage}, does not exist.  Please check your build parameters and try again.\nUse '-h' to get full help details."
      exit 1
    fi
    ;;
  tag)
    tag "${1}" "${2}"
    ;;
  buildandtag)
    build-and-tag "${@}"
    ;;

  *)
    echoWarning "Unrecognized command; ${_cmd}"
    globalUsage
    ;;
esac

popd >/dev/null